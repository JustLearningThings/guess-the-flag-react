{"version":3,"sources":["Header.js","Flag.js","Options.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["Header","score","id","Flag","image","imageAlt","src","alt","Options","optionsArray","checkAnswer","options","forEach","option","push","className","key","type","name","value","onClick","e","target","innerText","Result","result","correct","showResults","info","countryName","continueGame","style","color","area","toLocaleString","capital","demonym","languages","currency","symbol","App","props","state","scored","countries","guessed","flag","bind","arr","k","t","i","length","Math","floor","random","fetch","then","data","json","shuffledData","shuffle","rand","currentCountryLanguages","language","includes","setState","currencies","answer","this","document","getElementById","scrollIntoView","behavior","filteredArr","filter","country","newCountry","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uYAGe,SAASA,EAAT,GAA4B,IAAVC,EAAS,EAATA,MAChC,OACC,gCACC,8CACEA,GAAS,EAAI,uBAAGC,GAAG,SAAN,UAAuBD,GAAc,I,MCJxC,SAASE,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OAAO,yBAAKH,GAAG,OAAOI,IAAMF,EAAQG,IAAMF,I,MCD5B,SAASG,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAC3CC,EAAU,GAWd,OATAF,EAAaG,SAAQ,SAAAC,GACpBF,EAAQG,KACP,yBAAKC,UAAU,gBAAgBC,IAAMH,GACpC,2BAAOI,KAAK,QAAQC,KAAK,aAAaC,MAAQN,EAASO,QAAU,SAAAC,GAAC,OAAIX,EAAYW,EAAEC,OAAOH,UAC3F,2BAAOC,QAAU,SAAAC,GAAC,OAAIX,EAAYW,EAAEC,OAAOC,aAAgBV,QAM7D,yBAAKX,GAAG,WACLS,G,MCZU,SAASa,EAAT,GAA4E,IAFvEC,EAEaC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACzE,OAAIH,EAEH,yBAAKzB,GAAG,oBACP,wBAAIA,GAAG,SAAS6B,MAAO,CAAEC,OANRP,EAM2BC,EANjBD,EAAS,UAAY,aAMWC,EAAU,UAAY,QAAjF,MACEA,EACD,yBAAKxB,GAAG,0BACP,uBAAGA,GAAG,qBAAN,wBAA+C,8BAC/C,uBAAGA,GAAG,gBACJ2B,EAAeD,EAAKK,KAAL,0BAAiCL,EAAKK,KAAKC,kBAAqB,IADjF,uBAC4GN,EAAKO,QAAL,yBAAkCP,EAAKO,SAAa,GADhK,IAEEP,EAAKQ,QAAL,sBAA+BP,EAA/B,uBAA2DD,EAAKQ,SAAa,GAF/E,gBAE+F,2BAAKR,EAAKS,UAAU,IAFnH,YAEoI,2BAAKT,EAAKU,SAASpB,MAAYU,EAAKU,SAASC,OAAd,WAA2BX,EAAKU,SAASC,OAAzC,KAAoD,GAFvN,KAIA,uBAAGrC,GAAG,WAAWkB,QAAUU,GAA3B,aAEE,IAboB,yBAAK5B,GAAG,qBCGnC,IAsLesC,E,kDAlLb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXf,aAAa,EACbgB,QAAQ,EACRC,UAAW,GACXC,QAAS,GACThB,YAAa,GACbiB,KAAM,GACNpB,SAAS,EACTf,QAAS,CAAC,IACViB,KAAM,CACJK,MAAO,EACPE,QAAS,GACTC,QAAS,GACTC,UAAW,CAAC,IACZC,SAAU,CACRpB,KAAM,GACNqB,OAAQ,MAKd,EAAK7B,YAAc,EAAKA,YAAYqC,KAAjB,gBACnB,EAAKjB,aAAe,EAAKA,aAAaiB,KAAlB,gBAzBH,E,oDA4BXC,GAGN,IAFA,IAAIC,EAAGC,EAECC,EAAIH,EAAII,OAAS,EAAGD,EAAI,EAAGA,IACjCF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IAEpCD,EAAIF,EAAIG,GACRH,EAAIG,GAAKH,EAAIC,GACbD,EAAIC,GAAKC,EAGX,OAAOF,I,0CAGY,IAAD,OAClBQ,MAAM,wCACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,IAAIE,EAAe,EAAKC,QAAQH,GAC5BI,EAAOT,KAAKC,MAAMD,KAAKE,SAAWK,EAAaR,QAE/CW,EAA0B,GAE9BH,EAAaE,GAAMzB,UAAUzB,SAAQ,SAAAoD,GACnCD,EAAwBjD,KAAKkD,EAAS9C,SAKxC,IAFA,IAAIP,EAAU,CAACiD,EAAaE,GAAM5C,MAE1BiC,EAAI,EAAGA,EA7DH,EA6DoBA,IAAK,CAGnC,IAFA,IAAItC,EAAS+C,EAAaE,GAAM5C,KAE1BP,EAAQsD,SAASpD,IACrBA,EAAS+C,EAAaP,KAAKC,MAAMD,KAAKE,SAAWK,EAAaR,SAASlC,KAEzEP,EAAQG,KAAKD,GAGfF,EAAU,EAAKkD,QAAQlD,GAEvB,EAAKuD,SAAS,CACZtB,UAAWgB,EACX3D,MAAO,EACP6C,KAAMc,EAAaE,GAAMhB,KACzBjB,YAAa+B,EAAaE,GAAM5C,KAChCP,UACAiB,KAAM,CACJK,KAAM2B,EAAaE,GAAM7B,KACzBE,QAASyB,EAAaE,GAAM3B,QAC5BC,QAASwB,EAAaE,GAAM1B,QAC5BC,UAAW0B,EACXzB,SAAU,CACRpB,KAAM0C,EAAaE,GAAMK,WAAW,GAAGjD,KACvCqB,OAAQqB,EAAaE,GAAMK,WAAW,GAAG5B,gB,kCAOzC6B,GAAS,IAAD,EACcC,KAAK3B,MAA7Bb,EADU,EACVA,YAAac,EADH,EACGA,OAElBA,IAEAyB,IAAWvC,GAAgBc,EAY5B0B,KAAKH,SAAS,CACZvC,aAAa,EACbD,SAAS,IACR,WACD4C,SAASC,eAAe,oBAAoBC,eAAe,CAAEC,SAAU,cAfzEJ,KAAKH,UAAS,SAAAxB,GAAK,MAAK,CACtBf,aAAa,EACbD,SAAS,EACTmB,QAAQ,GAAD,mBAAMH,EAAMG,SAAZ,CAAqBhB,IAC5B5B,MAAOyC,EAAMzC,MAAQ,EACrB0C,QAAQ,MACN,WACF2B,SAASC,eAAe,oBAAoBC,eAAe,CAAEC,SAAU,iB,qCAa7D,IAAD,EACkBJ,KAAK3B,MAA5BE,EADK,EACLA,UAAWC,EADN,EACMA,QAEf6B,EAAc9B,EAAU+B,QAAO,SAAAC,GAAO,OAAK/B,EAAQoB,SAASW,EAAQ1D,SAEpE2D,EAAaH,EADNrB,KAAKC,MAAMD,KAAKE,SAAWmB,EAAYtB,SAG9CW,EAA0B,GAE9Bc,EAAWxC,UAAUzB,SAAQ,SAAAoD,GAC3BD,EAAwBjD,KAAKkD,EAAS9C,SAKxC,IAFA,IAAIP,EAAU,CAACkE,EAAW3D,MAElBiC,EAAI,EAAGA,EArIC,EAqIgBA,IAAK,CAGnC,IAFA,IAAItC,EAASgE,EAAW3D,KAElBP,EAAQsD,SAASpD,IACrBA,EAAS+B,EAAUS,KAAKC,MAAMD,KAAKE,SAAWX,EAAUQ,SAASlC,KAEnEP,EAAQG,KAAKD,GAGfF,EAAU0D,KAAKR,QAAQlD,GAEvB0D,KAAKH,SAAS,CACZvC,aAAa,EACbD,SAAS,EACTiB,QAAQ,EACRhC,UACAkB,YAAagD,EAAW3D,KACxB4B,KAAM+B,EAAW/B,KACjBlB,KAAM,CACJK,KAAM4C,EAAW5C,KACjBE,QAAS0C,EAAW1C,QACpBC,QAASyC,EAAWzC,QACpBC,UAAW0B,EACXzB,SAAU,CACRpB,KAAM2D,EAAWV,WAAW,GAAGjD,KAC/BqB,OAAQsC,EAAWV,WAAW,GAAG5B,WAGpC,WACD+B,SAASC,eAAe,kBAAkBC,eAAe,CAAEC,SAAU,gB,+BAI/D,IAAD,EACmEJ,KAAK3B,MAAvEI,EADD,EACCA,KAAMnC,EADP,EACOA,QAASe,EADhB,EACgBA,QAASC,EADzB,EACyBA,YAAaC,EADtC,EACsCA,KAAMC,EAD5C,EAC4CA,YAAa5B,EADzD,EACyDA,MAEhE,OACE,6BACE,kBAAC,EAAD,CAAQA,MAAQA,IAChB,yBAAKC,GAAG,kBACN,kBAAC,EAAD,CAAME,MAAQ0C,EAAOzC,SAAW,SAChC,kBAAC,EAAD,CAASI,aAAeE,EAAUD,YAAc2D,KAAK3D,eAEvD,kBAAC,EAAD,CAAQgB,QAAUA,EAAUE,KAAOA,EAAOC,YAAcA,EAAcF,YAAcA,EAAcG,aAAeuC,KAAKvC,oB,GA9K5GgD,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SDyHpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7a26ab3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nexport default function Header({ score }) {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<h1>Guess The Flag</h1>\r\n\t\t\t{ score >= 0 ? <p id=\"score\">Score: { score }</p> : ''} \r\n\t\t</header>\r\n\t);\r\n}","import React from 'react';\r\nimport './Flag.css';\r\n\r\nexport default function Flag({ image, imageAlt }) {\r\n\treturn <img id=\"flag\" src={ image } alt={ imageAlt } />\r\n}","import React from 'react';\r\nimport './Options.css';\r\n\r\nexport default function Options({ optionsArray, checkAnswer }) {\r\n\tlet options = [];\r\n\r\n\toptionsArray.forEach(option => {\r\n\t\toptions.push(\r\n\t\t\t<div className=\"options-input\" key={ option }>\r\n\t\t\t\t<input type=\"radio\" name=\"flag-guess\" value={ option } onClick={ e => checkAnswer(e.target.value) } />\r\n\t\t\t\t<label onClick={ e => checkAnswer(e.target.innerText) } >{ option }</label>\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div id=\"options\">\r\n\t\t\t{ options }\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst resultColor = result => result ? '#19e02d' : '#ff2e4d';\r\n\r\nexport default function Result({ correct, showResults, info, countryName, continueGame }) {\r\n\tif(!showResults) return ( <div id=\"result-container\" /> );\r\n\telse return (\r\n\t\t<div id=\"result-container\">\r\n\t\t\t<h3 id=\"result\" style={{ color: resultColor(correct) }} >{ correct ? 'Correct' : 'Wrong' } !</h3>\r\n\t\t\t{ correct ?\r\n\t\t\t\t<div id=\"country-info-container\">\r\n\t\t\t\t\t<p id=\"country-info-hook\">Did you know that... <br /></p>\r\n\t\t\t\t\t<p id=\"country-info\">\r\n\t\t\t\t\t{ countryName }{ info.area ?  ` has an area of ${ info.area.toLocaleString()}` : '.' } square kilometers. { info.capital ? `The capital is ${ info.capital }` : ''}.\r\n\t\t\t\t\t{ info.demonym ? `People from ${ countryName } are called ${ info.demonym }` : ''}. They speak <i>{ info.languages[0] }</i> and use <i>{ info.currency.name }</i>{ info.currency.symbol ? `(${info.currency.symbol})`: '' }.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p id=\"continue\" onClick={ continueGame }>Continue</p>\r\n\t\t\t\t</div>\r\n\t\t\t  : ''\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport Header from './Header';\nimport Flag from './Flag';\nimport Options from './Options';\nimport Result from './Result';\n\nconst OPTIONS_NUM = 3;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showResults: false,\n      scored: false,\n      countries: [],\n      guessed: [],\n      countryName: '',\n      flag: '',\n      correct: false,\n      options: [''],\n      info: {\n        area: -1,\n        capital: '',\n        demonym: '',\n        languages: [''],\n        currency: {\n          name: '',\n          symbol: ''\n        }\n      },\n    };\n\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.continueGame = this.continueGame.bind(this);\n  }\n\n  shuffle(arr) {\n    var k, t;\n\n    for(let i = arr.length - 1; i > 0; i--) {\n      k = Math.floor(Math.random() * (i + 1));\n\n      t = arr[i];\n      arr[i] = arr[k];\n      arr[k] = t;\n    }\n\n    return arr;\n  }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(data => data.json())\n      .then(data => {\n        let shuffledData = this.shuffle(data);\n        let rand = Math.floor(Math.random() * shuffledData.length);\n\n        let currentCountryLanguages = [];\n\n        shuffledData[rand].languages.forEach(language => {\n          currentCountryLanguages.push(language.name);\n        });\n\n        let options = [shuffledData[rand].name];\n\n        for(let i = 0; i < OPTIONS_NUM; i++) {\n          let option = shuffledData[rand].name;\n\n          while(options.includes(option))\n            option = shuffledData[Math.floor(Math.random() * shuffledData.length)].name;\n\n          options.push(option);\n        }\n\n        options = this.shuffle(options);\n\n        this.setState({\n          countries: shuffledData,\n          score: 0,\n          flag: shuffledData[rand].flag,\n          countryName: shuffledData[rand].name,\n          options,\n          info: {\n            area: shuffledData[rand].area,\n            capital: shuffledData[rand].capital,\n            demonym: shuffledData[rand].demonym,\n            languages: currentCountryLanguages,\n            currency: {\n              name: shuffledData[rand].currencies[0].name,\n              symbol: shuffledData[rand].currencies[0].symbol\n            }\n          }\n        });\n      });\n  }\n\n  checkAnswer(answer) {\n    const { countryName, scored } = this.state;\n\n    if(scored) return;\n\n    if(answer === countryName && !scored) {\n      this.setState(state => ({\n        showResults: true,\n        correct: true,\n        guessed: [...state.guessed, countryName],\n        score: state.score + 1,\n        scored: true\n      }), () => {\n        document.getElementById('result-container').scrollIntoView({ behavior: 'smooth' });\n      });\n    }\n    else {\n      this.setState({\n        showResults: true,\n        correct: false\n      }, () => {\n        document.getElementById('result-container').scrollIntoView({ behavior: 'smooth' });\n      });\n    }\n  }\n\n  continueGame() {\n    const { countries, guessed } = this.state;\n\n    let filteredArr = countries.filter(country => !guessed.includes(country.name));\n    let rand = Math.floor(Math.random() * filteredArr.length);\n    let newCountry = filteredArr[rand];\n\n    let currentCountryLanguages = [];\n\n    newCountry.languages.forEach(language => {\n      currentCountryLanguages.push(language.name);\n    });\n\n    let options = [newCountry.name];\n\n    for(let i = 0; i < OPTIONS_NUM; i++) {\n      let option = newCountry.name;\n\n      while(options.includes(option)) \n        option = countries[Math.floor(Math.random() * countries.length)].name;\n\n      options.push(option);\n    }\n\n    options = this.shuffle(options);\n\n    this.setState({\n      showResults: false,\n      correct: false,\n      scored: false,\n      options,\n      countryName: newCountry.name,\n      flag: newCountry.flag,\n      info: {\n        area: newCountry.area,\n        capital: newCountry.capital,\n        demonym: newCountry.demonym,\n        languages: currentCountryLanguages,\n        currency: {\n          name: newCountry.currencies[0].name,\n          symbol: newCountry.currencies[0].symbol\n        }\n      }\n    }, () => {\n      document.getElementById('game-controlls').scrollIntoView({ behavior: 'smooth' });\n    });\n  }\n\n  render() {\n    const { flag, options, correct, showResults, info, countryName, score } = this.state;\n\n    return (\n      <div>\n        <Header score={ score } />\n        <div id=\"game-controlls\">\n          <Flag image={ flag } imageAlt={ 'flag' } />\n          <Options optionsArray={ options } checkAnswer={ this.checkAnswer } />\n        </div>\n        <Result correct={ correct } info={ info } countryName={ countryName } showResults={ showResults } continueGame={ this.continueGame } />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}